// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: api/events/events.proto

package events

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AnalyticsServiceClient is the client API for AnalyticsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnalyticsServiceClient interface {
	CreateTask(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*TaskResponse, error)
	FinishTask(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*TaskResponse, error)
	CreateLetter(ctx context.Context, in *LetterRequest, opts ...grpc.CallOption) (*LetterResponse, error)
	AcceptedLetter(ctx context.Context, in *LetterRequest, opts ...grpc.CallOption) (*LetterResponse, error)
	DeclinedLetter(ctx context.Context, in *LetterRequest, opts ...grpc.CallOption) (*LetterResponse, error)
}

type analyticsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnalyticsServiceClient(cc grpc.ClientConnInterface) AnalyticsServiceClient {
	return &analyticsServiceClient{cc}
}

func (c *analyticsServiceClient) CreateTask(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*TaskResponse, error) {
	out := new(TaskResponse)
	err := c.cc.Invoke(ctx, "/AnalyticsService/CreateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) FinishTask(ctx context.Context, in *TaskRequest, opts ...grpc.CallOption) (*TaskResponse, error) {
	out := new(TaskResponse)
	err := c.cc.Invoke(ctx, "/AnalyticsService/FinishTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) CreateLetter(ctx context.Context, in *LetterRequest, opts ...grpc.CallOption) (*LetterResponse, error) {
	out := new(LetterResponse)
	err := c.cc.Invoke(ctx, "/AnalyticsService/CreateLetter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) AcceptedLetter(ctx context.Context, in *LetterRequest, opts ...grpc.CallOption) (*LetterResponse, error) {
	out := new(LetterResponse)
	err := c.cc.Invoke(ctx, "/AnalyticsService/AcceptedLetter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsServiceClient) DeclinedLetter(ctx context.Context, in *LetterRequest, opts ...grpc.CallOption) (*LetterResponse, error) {
	out := new(LetterResponse)
	err := c.cc.Invoke(ctx, "/AnalyticsService/DeclinedLetter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnalyticsServiceServer is the server API for AnalyticsService service.
// All implementations must embed UnimplementedAnalyticsServiceServer
// for forward compatibility
type AnalyticsServiceServer interface {
	CreateTask(context.Context, *TaskRequest) (*TaskResponse, error)
	FinishTask(context.Context, *TaskRequest) (*TaskResponse, error)
	CreateLetter(context.Context, *LetterRequest) (*LetterResponse, error)
	AcceptedLetter(context.Context, *LetterRequest) (*LetterResponse, error)
	DeclinedLetter(context.Context, *LetterRequest) (*LetterResponse, error)
	mustEmbedUnimplementedAnalyticsServiceServer()
}

// UnimplementedAnalyticsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAnalyticsServiceServer struct {
}

func (UnimplementedAnalyticsServiceServer) CreateTask(context.Context, *TaskRequest) (*TaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedAnalyticsServiceServer) FinishTask(context.Context, *TaskRequest) (*TaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishTask not implemented")
}
func (UnimplementedAnalyticsServiceServer) CreateLetter(context.Context, *LetterRequest) (*LetterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLetter not implemented")
}
func (UnimplementedAnalyticsServiceServer) AcceptedLetter(context.Context, *LetterRequest) (*LetterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptedLetter not implemented")
}
func (UnimplementedAnalyticsServiceServer) DeclinedLetter(context.Context, *LetterRequest) (*LetterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeclinedLetter not implemented")
}
func (UnimplementedAnalyticsServiceServer) mustEmbedUnimplementedAnalyticsServiceServer() {}

// UnsafeAnalyticsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnalyticsServiceServer will
// result in compilation errors.
type UnsafeAnalyticsServiceServer interface {
	mustEmbedUnimplementedAnalyticsServiceServer()
}

func RegisterAnalyticsServiceServer(s grpc.ServiceRegistrar, srv AnalyticsServiceServer) {
	s.RegisterService(&AnalyticsService_ServiceDesc, srv)
}

func _AnalyticsService_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AnalyticsService/CreateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).CreateTask(ctx, req.(*TaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_FinishTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).FinishTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AnalyticsService/FinishTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).FinishTask(ctx, req.(*TaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_CreateLetter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LetterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).CreateLetter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AnalyticsService/CreateLetter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).CreateLetter(ctx, req.(*LetterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_AcceptedLetter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LetterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).AcceptedLetter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AnalyticsService/AcceptedLetter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).AcceptedLetter(ctx, req.(*LetterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AnalyticsService_DeclinedLetter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LetterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServiceServer).DeclinedLetter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AnalyticsService/DeclinedLetter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServiceServer).DeclinedLetter(ctx, req.(*LetterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AnalyticsService_ServiceDesc is the grpc.ServiceDesc for AnalyticsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnalyticsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AnalyticsService",
	HandlerType: (*AnalyticsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTask",
			Handler:    _AnalyticsService_CreateTask_Handler,
		},
		{
			MethodName: "FinishTask",
			Handler:    _AnalyticsService_FinishTask_Handler,
		},
		{
			MethodName: "CreateLetter",
			Handler:    _AnalyticsService_CreateLetter_Handler,
		},
		{
			MethodName: "AcceptedLetter",
			Handler:    _AnalyticsService_AcceptedLetter_Handler,
		},
		{
			MethodName: "DeclinedLetter",
			Handler:    _AnalyticsService_DeclinedLetter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/events/events.proto",
}
